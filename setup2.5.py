"""
This is a setup.py script generated by py2applet

Usage:
    python setup.py py2app
"""
from setuptools import setup

APP = ['qwantz/dinoapp.py']
# DATA_FILES = ['qwantz/']
DATA_FILES=['qwantz/fetch.py', 'qwantz/fetchthread.py', 'qwantz/pilutil.py']
OPTIONS = dict(
    iconfile='qwantz.icns',
    argv_emulation=False,
    packages='wx',
    site_packages=False,
    semi_standalone=True,
    # resources=['resources/License.txt'],
    plist=dict(
        CFBundleName               = "DinosaurComics",
        CFBundleShortVersionString = "0.2.0",     # must be in X.X.X format
        CFBundleGetInfoString      = "DinosaurComics 0.2.0",
        CFBundleExecutable         = "DinosaurComics",
        CFBundleIdentifier         = "net.minrk.dinocomics",
    )
)
setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
)

import os
import sys,shutil,glob
pjoin = os.path.join
pyver = sys.version.split()[0][:3]
Contents=pjoin("./dist",OPTIONS['plist']['CFBundleName']+'.app','Contents')
bootfile = pjoin(Contents,"Resources","__boot__.py")
if os.path.isfile(bootfile):
    print "patching bootfile"
    f = open(bootfile)
    tail = f.read()
    s = "import sys,os\nsys.path.insert(0,os.path.join(os.environ['RESOURCEPATH'], 'lib', 'python%s'%(sys.version[:3]), 'lib-dynload'))\nprint sys.path\n"+f.read()
    f.close()
    lines = ["import sys, os,site",
            "sys.path.insert(0,os.path.join(os.environ['RESOURCEPATH'], 'lib', 'python%s'%(sys.version[:3]), 'lib-dynload'))",
            "site.addsitedir(os.path.join(os.environ['RESOURCEPATH'], 'lib', 'python%s'%(sys.version[:3])))",
            "site.addsitedir(os.path.join(os.environ['RESOURCEPATH'], 'lib', 'python%s'%(sys.version[:3]),'site-packages.zip' ))",
            "site.addsitedir('/System/Library/Frameworks/Python.framework/Versions/%s/Extras/lib/python'%(sys.version[:3]))",
            "print sys.path",
            tail]
    f = open(bootfile,'w')
    f.write('\n'.join(lines))
    f.close()

# cleanup incorrect includes:

site=pjoin(Contents, "Resources/lib/python%s"%pyver)
for subdir in "numpy scipy".split():
    if os.path.exists(pjoin(site, subdir)):
        shutil.rmtree(pjoin(site, subdir))

print "stripping unneeded libs"
for lib in glob.glob(pjoin(Contents, "Frameworks","libg*")):
    # pass
    os.remove(lib)

print "stripping unneeded WX"
resourcelib=pjoin(Contents, "Resources/lib/python%s"%pyver)
wx = pjoin(resourcelib,"wx")
for subdir in "tools locale".split():
    shutil.rmtree(pjoin(wx, subdir))
for lib in glob.glob(pjoin(wx, "lib","*")):
    libname = os.path.basename(lib)
    if not libname.startswith("scrolledpanel") and not libname.startswith("__init__"):
        # print lib
        if os.path.isdir(lib):
            shutil.rmtree(lib)
        else:
            os.remove(lib)


print "forcing 32-bit python:"
target = pjoin(Contents, "MacOS", OPTIONS['plist']['CFBundleExecutable'])
temp=target+".tmp"
os.system("ditto --rsrc --arch i386 --arch ppc %s %s"%(target, temp))
shutil.move(temp, target)
os.system("ditto --rsrc --arch i386 --arch ppc %s %s"%(pjoin("dist", OPTIONS['plist']['CFBundleName']+".app"),pjoin("dist", OPTIONS['plist']['CFBundleName']+"32.app") ))



